{"version":3,"sources":["../../src/dropdown/dropdown-toggle.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,UAAA,EAAY,IAAA,EAAM,WAAA,EAAa,YAAA,EAAc,KAAA,EACzD,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,iBAAA,EAAkB,MAAO,sBAAA,CAAuB;AAEzD,4EAA4E;AAE5E;IAeE,iCAAoB,QAA0B,EAAE,EAAa;QAd7D,+CAA+C;QAEvC,eAAU,GAAW,KAAK,CAAC;QAEnC,qEAAqE;QAE7D,mBAAc,GAAW,IAAI,CAAC;QAG/B,aAAQ,GAAW,IAAI,CAAC;QAM7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IAEM,0CAAQ,GAAf;QACE,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;IACtC,CAAC;IAGD,sBAAW,2CAAM;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC9B,CAAC;;;OAAA;IAGM,gDAAc,GAArB,UAAsB,KAAW;QAC/B,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAmBH,8BAAC;AAAD,CAxDA,AAwDC;;AAlBM,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,kBAAkB;gBAC5B,QAAQ,EAAE,oBAAoB;aAC/B,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,sCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAG,EAAC;IACzD,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAH6F,CAG7F,CAAC;AACK,sCAAc,GAA2C;IAChE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClF,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,uBAAuB,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7F,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAG,EAAE,EAAE;IACpE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAG,EAAE,EAAE;IAClE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAG,EAAE,EAAE;CACzE,CAAC","file":"dropdown-toggle.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive, ElementRef, Host, HostBinding, HostListener, Input, OnInit\n} from '@angular/core';\n\nimport { DropdownDirective } from './dropdown.directive';\n\n/** Mark element which can toggle dropdown visibility with this directive */\n\nexport class DropdownToggleDirective implements OnInit {\n  /** if true dropdown toggle will be disabled */\n  \n   public isDisabled:boolean = false;\n\n  /** if true the dropdown-toggle class will be added to the element */\n  \n   public addToggleClass:boolean = true;\n\n  \n  public addClass:boolean = true;\n\n  public dropdown:DropdownDirective;\n  public el:ElementRef;\n\n  public constructor( dropdown:DropdownDirective, el:ElementRef) {\n    this.dropdown = dropdown;\n    this.el = el;\n  }\n\n  public ngOnInit():void {\n    this.dropdown.dropDownToggle = this;\n  }\n\n  \n  public get isOpen():boolean {\n    return this.dropdown.isOpen;\n  }\n\n  \n  public toggleDropdown(event:Event):boolean {\n    event.stopPropagation();\n\n    if (!this.isDisabled) {\n      this.dropdown.toggle();\n    }\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dropdownToggle]',\n  exportAs: 'bs-dropdown-toggle'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownDirective, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isDisabled': [{ type: HostBinding, args: ['class.disabled', ] },{ type: Input },],\n'addToggleClass': [{ type: HostBinding, args: ['class.dropdown-toggle', ] },{ type: Input },],\n'addClass': [{ type: HostBinding, args: ['attr.aria-haspopup', ] },],\n'isOpen': [{ type: HostBinding, args: ['attr.aria-expanded', ] },],\n'toggleDropdown': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}